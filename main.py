import telebot
import sqlite3
import logging
from telebot import custom_filters
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, Message
from telebot.handler_backends import State, StatesGroup
import random
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É
bot = telebot.TeleBot("7748202816:AAGhyNGFDAp940tEW_Bo4okMzopmYQKoQmM")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('quiz.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS players (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            correct_answers INTEGER DEFAULT 0,
            incorrect_answers INTEGER DEFAULT 0,
            grade REAL DEFAULT 5.0
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS questions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            question TEXT,
            options TEXT,
            correct_answer TEXT,
            subject TEXT,
            difficulty INTEGER,
            explanation TEXT,
            link TEXT
        )
    ''')
    conn.commit()
    conn.close()


# –°–ª–æ–≤–∞—Ä—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤
SUBJECT_MAP = {
    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": "math",
    "–ò—Å—Ç–æ—Ä–∏—è": "history",
    "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞": "literature",
}


# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
class QuizStates(StatesGroup):
    choose_subject = State()
    answer = State()


# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä ---
def create_main_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("/quiz"))
    markup.add(KeyboardButton("/score"))
    return markup


def create_subject_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    for subject in SUBJECT_MAP:
        markup.add(KeyboardButton(subject))
    markup.row(KeyboardButton("üö™ –í—ã—Ö–æ–¥"))
    return markup


def create_options_keyboard(options):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    for option in options:
        markup.add(KeyboardButton(option))
    markup.row(KeyboardButton("üö™ –í—ã—Ö–æ–¥"))
    return markup


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
def get_question(subject_key, user_id):
    try:
        conn = sqlite3.connect('quiz.db')
        cursor = conn.cursor()
        cursor.execute("SELECT grade FROM players WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è user_id {user_id}: {result}")

        if result:
            player_grade = result[0]
            min_difficulty = max(1, int(player_grade - 1))
            max_difficulty = min(11, int(player_grade + 1))

            cursor.execute('''
                SELECT question, correct_answer, options, explanation, link, difficulty
                FROM questions
                WHERE subject = ? AND difficulty BETWEEN ? AND ?
                ORDER BY RANDOM() LIMIT 1
            ''', (subject_key, min_difficulty, max_difficulty))
            question_data = cursor.fetchone()

            if question_data:
                question, correct_answer, options_str, explanation, link, difficulty = question_data
                try:
                    options = json.loads(options_str)
                except json.JSONDecodeError:
                    options = options_str.split(',')
                    options = [opt.strip() for opt in options]

                if correct_answer not in options:
                    options.append(correct_answer)
                random.shuffle(options)
                return {
                    "question": question,
                    "correct_answer": correct_answer,
                    "options": options,
                    "explanation": explanation,
                    "link": link,
                    "difficulty": difficulty
                }
            else:
                return None
        else:
            logging.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –æ—Ü–µ–Ω–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
            player_grade = 5.0
            return get_question(subject_key, user_id)  # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ —Å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –æ—Ü–µ–Ω–∫–æ–π

    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ë–î –≤ get_question: {e}")
        return None
    finally:
        if conn:
            conn.close()


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---

@bot.message_handler(commands=["start"])
def start(msg):
    user_id = msg.from_user.id
    username = msg.from_user.username
    try:
        conn = sqlite3.connect('quiz.db')
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR REPLACE INTO players (user_id, username, grade, correct_answers, incorrect_answers) 
            VALUES (?, ?, ?, COALESCE((SELECT correct_answers FROM players WHERE user_id = ?), 0),
                   COALESCE((SELECT incorrect_answers FROM players WHERE user_id = ?), 0))
        ''', (user_id, username, 5.0, user_id, user_id))
        conn.commit()

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        bot.send_message(msg.chat.id, """üéâ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –≤ LucasTeamEducationBot! 
                –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –≤ —Ç–∞–∫–∏–µ –∏–≥—Ä—ã –∫–∞–∫: 
                üîπ–í–∏—Å–µ–ª–∏—Ü–∞
                üîπ–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–æ–π
                üîπ–í–µ—Ä—é - –Ω–µ –≤–µ—Ä—é
                 –¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –Ω–∞ –æ–¥–Ω—É –∏–∑ —Ç–µ–º –Ω–∞ –≤—ã–±–æ—Ä:
                 üî∏–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞
                 üî∏–ò—Å—Ç–æ—Ä–∏—è
                 üî∏–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞
                –î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–π /help. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏—Å–ø–æ–ª—å–∑—É–π /quiz, –∞ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –∏—Å–ø–æ–ª—å–∑—É–π /minigame .""",
                         reply_markup=create_main_keyboard())

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")

    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {e}")
        bot.send_message(msg.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        if 'conn' in locals() and conn:
            conn.close()


@bot.message_handler(commands=["help"])
def help(msg):
    text = """
üéì <b>LucasTeamEducationBot</b> ‚Äî —Ç–≤–æ–π —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –æ–±—É—á–µ–Ω–∏–∏!

üìö <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/quiz - –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É (–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –ò—Å—Ç–æ—Ä–∏—è, –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞)
/score - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üéÆ <b>–ú–∏–Ω–∏-–∏–≥—Ä—ã:</b>
‚Ä¢ –í–∏—Å–µ–ª–∏—Ü–∞ (—É–≥–∞–¥–∞–π —Ç–µ—Ä–º–∏–Ω)
‚Ä¢ –ú–∞—Ç–±–æ–π (—Ä–µ—à–∞–π –ø—Ä–∏–º–µ—Ä—ã –Ω–∞ –≤—Ä–µ–º—è)
‚Ä¢ –í–µ—Ä—é/–ù–µ –≤–µ—Ä—é (–æ–ø—Ä–µ–¥–µ–ª–∏ –∏—Å—Ç–∏–Ω–Ω–æ—Å—Ç—å)

üìä <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–¥ —Ç–≤–æ–π –∫–ª–∞—Å—Å (1-11)
‚Ä¢ –†–∞–∑–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ —Å —É—á–µ–±–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –±–µ–π–¥–∂–µ–π
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

üèÜ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>
–≠—Ä—É–¥–∏—Ç | –°–ø—Ä–∏–Ω—Ç–µ—Ä | –î–µ—Ç–µ–∫—Ç–æ—Ä –ª–∂–∏

üìÜ <i>–ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–∂–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!</i>

–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:
‚Ä¢ @LucasTeamLuke (–õ–∏–¥–µ—Ä)
‚Ä¢ @EnidBlaiton

–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —á–∞—Ç—É: 
t.me/+6Q4LbNIZFAMwMDI6
"""
    bot.send_message(msg.chat.id, text, reply_markup=create_main_keyboard(), parse_mode='HTML')


@bot.message_handler(commands=["quiz"])
def start_quiz(msg):
    bot.delete_state(msg.from_user.id, msg.chat.id)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} –Ω–∞—á–∞–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.")
    bot.send_message(msg.chat.id, "üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=create_subject_keyboard())
    bot.set_state(msg.from_user.id, QuizStates.choose_subject, msg.chat.id)


@bot.message_handler(state=QuizStates.choose_subject)
def handle_subject_selection(msg: Message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} –≤—ã–±—Ä–∞–ª –ø—Ä–µ–¥–º–µ—Ç: {msg.text}")
    user_id = msg.from_user.id
    if msg.text == "üö™ –í—ã—Ö–æ–¥":
        bot.send_message(msg.chat.id, "–í—ã –≤—ã—à–ª–∏ –∏–∑ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.", reply_markup=create_main_keyboard())
        bot.delete_state(user_id, msg.chat.id)  # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        return

    subject_key = SUBJECT_MAP.get(msg.text)

    if not subject_key:
        bot.send_message(msg.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    question = get_question(subject_key, user_id)  # <- –ü–ï–†–ï–î–ê–ï–ú user_id

    if question:
        bot.send_message(msg.chat.id, question["question"], reply_markup=create_options_keyboard(question["options"]))
        bot.set_state(msg.from_user.id, QuizStates.answer, msg.chat.id)
        with bot.retrieve_data(msg.from_user.id, msg.chat.id) as data:
            data['correct_answer'] = question['correct_answer']
            data['explanation'] = question['explanation']
            data['link'] = question['link']
            data['difficulty'] = question['difficulty']
    else:
        bot.send_message(msg.chat.id,
                         "–í–æ–ø—Ä–æ—Å—ã –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–µ–¥–º–µ—Ç –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        bot.set_state(msg.from_user.id, QuizStates.choose_subject, msg.chat.id)


@bot.message_handler(state=QuizStates.answer)
def handle_answer(msg: Message):
    logging.info(f"handle_answer –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id} —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º: {msg.text}")
    user_id = msg.from_user.id
    with bot.retrieve_data(user_id, msg.chat.id) as data:
        correct_answer = data.get('correct_answer')
        explanation = data.get('explanation')
        link = data.get('link')
        difficulty = data.get('difficulty')

    if msg.text == "üö™ –í—ã—Ö–æ–¥":
        bot.send_message(msg.chat.id, "–í—ã –≤—ã—à–ª–∏ –∏–∑–≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.", reply_markup=create_main_keyboard())
        bot.delete_state(user_id, msg.chat.id)  # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        return

    if msg.text == correct_answer:
        bot.send_message(msg.chat.id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
        # ... (–∫–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –æ—Ü–µ–Ω–∫–∏)
    else:
        bot.send_message(msg.chat.id, f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")
        # ... (–∫–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –æ—Ü–µ–Ω–∫–∏)

    if explanation:
        bot.send_message(msg.chat.id, f"ü§ì –ü–æ—è—Å–Ω–µ–Ω–∏–µ: {explanation}")
    if link:
        bot.send_message(msg.chat.id, f"üîó –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª: {link}")

    question = get_question(SUBJECT_MAP.get(msg.text), user_id)  # <- –ü–ï–†–ï–î–ê–ï–ú user_id
    if question:
        bot.send_message(msg.chat.id, question["question"], reply_markup=create_options_keyboard(question["options"]))
        with bot.retrieve_data(msg.from_user.id, msg.chat.id) as data:
            data['correct_answer'] = question['correct_answer']
            data['explanation'] = question['explanation']
            data['link'] = question['link']
            data['difficulty'] = question['difficulty']

    else:
        bot.send_message(msg.chat.id,
                         "–í–æ–ø—Ä–æ—Å—ã –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–µ–¥–º–µ—Ç –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                         reply_markup=create_subject_keyboard())
        bot.set_state(msg.from_user.id, QuizStates.choose_subject, msg.chat.id)


@bot.message_handler(
    commands=["score"])  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /score - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /score
def show_score(msg):
    try:  # –ù–∞—á–∏–Ω–∞–µ–º –±–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        user_id = msg.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        conn = sqlite3.connect('quiz.db')  # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor = conn.cursor()  # –°–æ–∑–¥–∞–µ–º –∫—É—Ä—Å–æ—Ä
        cursor.execute("SELECT correct_answers, incorrect_answers FROM players WHERE user_id = ?",
                       (user_id,))  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stats = cursor.fetchone()  # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞

        if stats:  # –ï—Å–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–π–¥–µ–Ω–∞
            correct, incorrect = stats  # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
            total = correct + incorrect  # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤
            response = f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}\n‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {incorrect}\nüèÜ –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {total}"  # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        else:  # –ï—Å–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
            response = "‚ùå –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"  # –°–æ–æ–±—â–∞–µ–º –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

        bot.send_message(msg.chat.id, response,
                         reply_markup=create_main_keyboard())  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π

    except sqlite3.Error as e:  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        logging.error(f"–û—à–∏–±–∫–∞ –ë–î –≤ show_score: {e}")  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –ª–æ–≥
        bot.send_message(msg.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")  # –°–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
    finally:  # –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞
        if conn:  # –ï—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
            conn.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ


bot.add_custom_filter(custom_filters.StateFilter(bot))

if __name__ == "__main__":
    init_db()
    bot.remove_webhook()
    bot.infinity_polling(timeout=30, long_polling_timeout=30)  # –£–±—Ä–∞–ª–∏ restart_on_change
