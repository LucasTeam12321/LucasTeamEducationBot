from random import choice, randint
import sqlite3
import telebot
from telebot import custom_filters
from telebot.states import StatesGroup, State
from telebot.storage import StateMemoryStorage
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, Message

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = '7748202816:AAGhyNGFDAp940tEW_Bo4okMzopmYQKoQmM'

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
user_data = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
state_storage = StateMemoryStorage()
bot = telebot.TeleBot(API_TOKEN, state_storage=state_storage, use_class_middlewares=True)


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class QuizStates(StatesGroup):
    question = State()
    answer = State()
    guess_number = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_main_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: /score –∏ /leaderboard
    markup.row(KeyboardButton('/score'), KeyboardButton('/leaderboard'))
    # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: /quiz
    markup.row(KeyboardButton('/quiz'))
    markup.row(KeyboardButton('/minigame1'), KeyboardButton('/minigame2'))  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–µ –º–∏–Ω–∏-–∏–≥—Ä—ã
    return markup


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
def create_options_keyboard(options):
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for option in options:
        markup.add(KeyboardButton(option))
    return markup


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∏–≥—Ä—ã
def create_tic_tac_toe_keyboard():
    cmds_keyboard = ReplyKeyboardMarkup()
    cmds_keyboard.row(KeyboardButton("0 0"), KeyboardButton("0 1"), KeyboardButton("0 2"))
    cmds_keyboard.row(KeyboardButton("1 0"), KeyboardButton("1 1"), KeyboardButton("1 2"))
    cmds_keyboard.row(KeyboardButton("2 0"), KeyboardButton("2 1"), KeyboardButton("2 2"))
    cmds_keyboard.add(KeyboardButton("/stop"))
    return cmds_keyboard


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_random_question():
    conn = sqlite3.connect('quiz.db')
    cursor = conn.cursor()

    cursor.execute('SELECT question, options, correct_answer FROM questions ORDER BY RANDOM() LIMIT 1')
    row = cursor.fetchone()

    conn.close()

    if row:
        question, options_str, correct_answer = row
        options = options_str.split(',')  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫
        return {
            "question": question,
            "options": options,
            "correct_answer": correct_answer
        }
    return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞
def get_player_stats(user_id):
    conn = sqlite3.connect('quiz.db')
    cursor = conn.cursor()

    cursor.execute('SELECT correct_answers, incorrect_answers, score, minigames_played FROM players WHERE user_id = ?', (user_id,))
    row = cursor.fetchone()

    conn.close()

    if row:
        return {
            "correct_answers": row[0],
            "incorrect_answers": row[1],
            "score": row[2],
            "minigames_played": row[3]
        }
    return {
        "correct_answers": 0,
        "incorrect_answers": 0,
        "score": 0,
        "minigames_played": 0
    }


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞
def update_player_stats(user_id, username=None, correct_answers=0, incorrect_answers=0, score=0, minigames_played=0):
    conn = sqlite3.connect('quiz.db')
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('SELECT user_id FROM players WHERE user_id = ?', (user_id,))
    if cursor.fetchone():
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
        cursor.execute('''
            UPDATE players
            SET correct_answers = correct_answers + ?,
                incorrect_answers = incorrect_answers + ?,
                score = score + ?,
                minigames_played = minigames_played + ?
            WHERE user_id = ?
        ''', (correct_answers, incorrect_answers, score, minigames_played, user_id))
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        cursor.execute('''
            INSERT INTO players (user_id, username, correct_answers, incorrect_answers, score, minigames_played)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (user_id, username, correct_answers, incorrect_answers, score, minigames_played))

    conn.commit()
    conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞ –∏–≥—Ä–æ–∫–æ–≤
def get_leaderboard():
    conn = sqlite3.connect('quiz.db')
    cursor = conn.cursor()

    # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    cursor.execute('''
        SELECT user_id, score
        FROM players
        ORDER BY score DESC
        LIMIT 10
    ''')
    rows = cursor.fetchall()

    conn.close()

    return rows


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ—Å–∫–∏ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
def get_board_state_3t(board):
    return "\n".join("".join(board[i]) for i in range(3))


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ª–∏ –∏–≥—Ä–∞
def is_game_over_3t(board):
    for player in ["‚úñÔ∏è", "‚≠ï"]:
        if [player] * 3 in board:
            return player
        if [player] * 3 in [[board[row][col] for row in range(3)] for col in range(3)]:
            return player
        if [player] * 3 in [[board[i][i] for i in range(3)], [board[i][2 - i] for i in range(3)]]:
            return player
    if "üî≤" not in get_board_state_3t(board):
        return "üî≤"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–±–µ–¥–µ
def send_win_message_3t(winner, user_id):
    if winner == "üî≤":
        bot.send_message(user_id, "–í—Å–µ –∫–ª–µ—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ù–∏—á—å—è!", reply_markup=create_main_keyboard())
    elif winner == "‚≠ï":
        bot.send_message(user_id, "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! üéâ +1 –æ—á–∫–æ!", reply_markup=create_main_keyboard())
        update_player_stats(user_id, score=1)  # –ù–∞—á–∏—Å–ª—è–µ–º 1 –æ—á–∫–æ–≤ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –º–∏–Ω–∏-–∏–≥—Ä
    else:
        bot.send_message(user_id, "–ë–æ—Ç –≤—ã–∏–≥—Ä–∞–ª! üò¢", reply_markup=create_main_keyboard())
    update_player_stats(user_id, minigames_played=1)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –º–∏–Ω–∏-–∏–≥—Ä –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–æ–¥–∞ –±–æ—Ç–∞
def get_move_3t(board):
    available_moves = []
    for row in range(3):
        for col in range(3):
            if board[row][col] == "üî≤":
                available_moves.append((row, col))
    return choice(available_moves)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=["start"])
def start(msg):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –æ—á–∫–æ–≤
    user_id = msg.from_user.id
    stats = get_player_stats(user_id)

    with bot.retrieve_data(user_id, msg.chat.id) as data:
        data["correct_answers"] = stats["correct_answers"]
        data["incorrect_answers"] = stats["incorrect_answers"]

    bot.send_message(msg.chat.id, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ –º–∏—Ä–µ –∑–Ω–∞–Ω–∏–π! \n –Ø —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —É–≤–ª–µ—á—å —Ç–µ–±—è "
                                  "–∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–º –∫–≤–∏–∑–æ–º. –î–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º —Ç–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –∏ —Ä–∞—Å—à–∏—Ä–∏–º –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã –≤–º–µ—Å—Ç–µ! ‚ú®",
                     reply_markup=create_main_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /score
@bot.message_handler(commands=["score"])
def show_score(msg):
    user_id = msg.from_user.id
    stats = get_player_stats(user_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(msg.chat.id, f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                                  f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stats['correct_answers']}\n"
                                  f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stats['incorrect_answers']}\n"
                                  f"üèÜ –û—á–∫–æ–≤: {stats['score']}\n"
                                  f"üéÆ –°—ã–≥—Ä–∞–Ω–æ –º–∏–Ω–∏-–∏–≥—Ä: {stats['minigames_played']}",
                     reply_markup=create_main_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /leaderboard
@bot.message_handler(commands=["leaderboard"])
def show_leaderboard(msg):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤
    leaderboard = get_leaderboard()

    if not leaderboard:
        bot.send_message(msg.chat.id, "–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç. –°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º! üèÜ",
                         reply_markup=create_main_keyboard())
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–ø–æ–º –∏–≥—Ä–æ–∫–æ–≤
    leaderboard_message = "üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n"
    for i, (user_id, correct_answers) in enumerate(leaderboard, start=1):
        try:
            user = bot.get_chat_member(user_id, user_id).user
            username = user.username if user.username else user.first_name
        except Exception:
            username = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"

        leaderboard_message += f"{i}. {username}: {correct_answers} ‚úÖ\n"

    bot.send_message(msg.chat.id, leaderboard_message,
                     reply_markup=create_main_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /quiz
@bot.message_handler(commands=["quiz"])
def start_quiz(msg):
    user_id = msg.from_user.id
    bot.set_state(user_id, QuizStates.question, msg.chat.id)
    ask_question(msg)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset
@bot.message_handler(commands=["reset"])
def reset_score(msg):
    user_id = msg.from_user.id

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –æ—á–∫–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    update_player_stats(user_id, -get_player_stats(user_id)["correct_answers"],
                        -get_player_stats(user_id)["incorrect_answers"])

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –æ—á–∫–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    with bot.retrieve_data(user_id, msg.chat.id) as data:
        data["correct_answers"] = 0
        data["incorrect_answers"] = 0

    bot.send_message(msg.chat.id, "üîÑ –°—á–µ—Ç—á–∏–∫ –æ—á–∫–æ–≤ —Å–±—Ä–æ—à–µ–Ω. –ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ!",
                     reply_markup=create_main_keyboard())


@bot.message_handler(commands=["minigame1"])
def start_tic_tac_toe(message: Message):
    user_id = message.from_user.id

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
    user_data[user_id] = [["üî≤"] * 3 for _ in range(3)]

    # –ü–µ—Ä–≤—ã–π —Ö–æ–¥ –±–æ—Ç–∞
    row, col = get_move_3t(user_data[user_id])
    user_data[user_id][row][col] = "‚úñÔ∏è"

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∏–≥—Ä—ã
    cmds_keyboard = create_tic_tac_toe_keyboard()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ—Å–∫–∏
    bot.send_message(user_id, get_board_state_3t(user_data[user_id]), reply_markup=cmds_keyboard)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
    bot.set_state(user_id, "playing_tic_tac_toe", message.chat.id)


@bot.message_handler(commands=["minigame2"])
def start_guess_number(message: Message):
    user_id = message.from_user.id

    # –ó–∞–≥–∞–¥—ã–≤–∞–µ–º —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100
    secret_number = randint(1, 100)
    attempts_left = 8  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with bot.retrieve_data(user_id, message.chat.id) as data:
        data["secret_number"] = secret_number
        data["attempts_left"] = attempts_left

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏–≥—Ä—ã
    bot.send_message(user_id, "üéÆ –ò–≥—Ä–∞ '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ'!\n"
                              "–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100. –£ —Ç–µ–±—è –µ—Å—Ç—å 8 –ø–æ–ø—ã—Ç–æ–∫, —á—Ç–æ–±—ã —É–≥–∞–¥–∞—Ç—å –µ–≥–æ.\n"
                              "–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –∏ –ø–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!",
                     reply_markup=ReplyKeyboardRemove())

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    bot.set_state(user_id, QuizStates.guess_number, message.chat.id)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
def ask_question(msg):
    user_id = msg.from_user.id
    chat_id = msg.chat.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    question_data = get_random_question()
    if not question_data:
        bot.send_message(chat_id, "–í–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! üéâ",
                         reply_markup=create_main_keyboard())
        return

    question = question_data["question"]
    options = question_data["options"]
    correct_answer = question_data["correct_answer"]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with bot.retrieve_data(user_id, chat_id) as data:
        data["correct_answer"] = correct_answer

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    markup = create_options_keyboard(options)

    bot.send_message(chat_id, question, reply_markup=markup)
    bot.set_state(user_id, QuizStates.answer, chat_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
@bot.message_handler(state=QuizStates.answer)
def check_answer(msg):
    user_id = msg.from_user.id
    chat_id = msg.chat.id

    with bot.retrieve_data(user_id, chat_id) as data:
        correct_answer = data["correct_answer"]

    if msg.text == correct_answer:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏ –Ω–∞—á–∏—Å–ª—è–µ–º 1 –æ—á–∫–æ
        update_player_stats(user_id, correct_answers=1, score=1)  # –î–æ–±–∞–≤–ª–µ–Ω–æ score=1
        bot.send_message(chat_id, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ +1 –æ—á–∫–æ!", reply_markup=create_main_keyboard())
    else:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        update_player_stats(user_id, incorrect_answers=1)
        bot.send_message(chat_id, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}",
                         reply_markup=create_main_keyboard())

    # –ó–∞–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    ask_question(msg)


@bot.message_handler(func=lambda message: bot.get_state(message.from_user.id, message.chat.id) == "playing_tic_tac_toe")
def handle_tic_tac_toe_move(message: Message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    if message.text == "/stop":
        bot.send_message(user_id, "–ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!", reply_markup=create_main_keyboard())
        bot.delete_state(user_id, chat_id)
        return

    try:
        row, col = map(int, message.text.split())
        if user_data[user_id][row][col] != "üî≤":
            bot.send_message(user_id, "–ù–µ–≤–æ–∑–º–æ–∂–Ω—ã–π —Ö–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=create_tic_tac_toe_keyboard())
            return

        # –•–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data[user_id][row][col] = "‚≠ï"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–±–µ–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        winner = is_game_over_3t(user_data[user_id])
        if winner:
            bot.send_message(user_id, get_board_state_3t(user_data[user_id]))
            send_win_message_3t(winner, user_id)
            bot.delete_state(user_id, chat_id)
            return

        # –•–æ–¥ –±–æ—Ç–∞
        row, col = get_move_3t(user_data[user_id])
        user_data[user_id][row][col] = "‚úñÔ∏è"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–±–µ–¥—É –±–æ—Ç–∞
        winner = is_game_over_3t(user_data[user_id])
        if winner:
            bot.send_message(user_id, get_board_state_3t(user_data[user_id]))
            send_win_message_3t(winner, user_id)
            bot.delete_state(user_id, chat_id)
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ—Å–∫–∏
        bot.send_message(user_id, get_board_state_3t(user_data[user_id]), reply_markup=create_tic_tac_toe_keyboard())

    except Exception as e:
        print(e)
        bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ '0 0'.",
                         reply_markup=create_tic_tac_toe_keyboard())

@bot.message_handler(state=QuizStates.guess_number)
def handle_guess_number(message: Message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    with bot.retrieve_data(user_id, chat_id) as data:
        secret_number = data["secret_number"]
        attempts_left = data["attempts_left"]

    try:
        guess = int(message.text)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —á–∏—Å–ª–æ

        if guess < 1 or guess > 100:
            bot.send_message(user_id, "–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100!")
            return

        attempts_left -= 1  # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ø—ã—Ç–æ–∫

        if guess == secret_number:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ
            bot.send_message(user_id, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ {secret_number} –∑–∞ {8 - attempts_left} –ø–æ–ø—ã—Ç–æ–∫! +5 –æ—á–∫–æ–≤!",
                             reply_markup=create_main_keyboard())
            update_player_stats(user_id, score=5, minigames_played=1)  # –ù–∞—á–∏—Å–ª—è–µ–º 5 –æ—á–∫–æ–≤ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –º–∏–Ω–∏-–∏–≥—Ä
            bot.delete_state(user_id, chat_id)  # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
            return

        if attempts_left == 0:
            # –ü–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
            bot.send_message(user_id, f"üò¢ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ {secret_number}.",
                             reply_markup=create_main_keyboard())
            update_player_stats(user_id, minigames_played=1)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –º–∏–Ω–∏-–∏–≥—Ä
            bot.delete_state(user_id, chat_id)  # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
            return

        # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if guess < secret_number:
            bot.send_message(user_id, f"‚¨ÜÔ∏è –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {attempts_left}")
        else:
            bot.send_message(user_id, f"‚¨áÔ∏è –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {attempts_left}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ø—ã—Ç–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        with bot.retrieve_data(user_id, chat_id) as data:
            data["attempts_left"] = attempts_left

    except ValueError:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –Ω–µ —á–∏—Å–ª–æ
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.")
        return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –Ω–µ —É–º–µ–Ω—å—à–∞—Ç—å attempts_left


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@bot.message_handler(func=lambda message: True)
def error_message(message):
    bot.send_message(message.from_user.id, "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ªü§∑‚Äç‚ôÄÔ∏è",
                     reply_markup=create_main_keyboard())


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π
bot.add_custom_filter(custom_filters.StateFilter(bot))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.infinity_polling()
